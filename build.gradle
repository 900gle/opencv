buildscript {
    ext {
        springBootVersion = '2.3.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.etoos'
    version = '0.0.0'
    sourceCompatibility = '14'

    repositories {
        mavenCentral()
    }

    //Spring Boot Overriding
    ext['hibernate.version'] = '5.2.11.Final' //추가

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
    def swaggerVersion = '2.5.0'
    def mybatisVersion = '2.0.0'
    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'junit:junit:4.12'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        compile fileTree(dir: './libs', include: ['*.jar'])




        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        compile 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.0'

//    compile('org.springframework.boot:spring-boot-starter-thymeleaf')


        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }
}

project(':api') {
    dependencies {
        compile project(':common')
    }
}

project(':batch') {
    dependencies {
        compile project(':common')
    }
}

project(':web') {
    dependencies {
        compile project(':common')
    }
}

project(':indexer') {
    dependencies {
        compile project(':common')
    }
}